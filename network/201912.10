## JWT(Json Web Token)

* 기존의 인증 매커니즘은 Session Token 방식이었다. 
    * Session Token방식은 사용자가 인증과정을 거치면 사용자에 대한 정보를 서버에서 Session으로 
    저장하고, 관리하던 방식이었다.
    * 그런데 이러한 방식의 문제점은 여러대의 서버를 사용할 때에 각각 관리하는 Session이 달라지게 되고 사용자가 해당 자신의
    Session이 존재하는 서버에만 요청을 해야되서 로드밸런서 등이 라우팅을 해줘야 하는 등의 작업이 추가적으로 생기게 된다. 
* JWT 의 방식을 사용한다면?
    * JWT 방식을 사용한다면 인증과정을 거친다면 사용자에게 Json 형식의 Web Token을 부여해주게 되고, 그것은 사용자가 브라우저에 보관을 하게 된다.
    * 이후 요청 할 떄에 JWT 토큰을 요청과 항상 같이주고 서버에서는 이러한 JWT를 확인만 해준다면 서버에서는 상태를 관리하지 않아도 되는 Stateless Server가 
    된다. 이러한 방식이라면 로드밸런서가 어떤 서버에 세션이 존재하는지에 대한 라우팅 작업도 필요없고 Session관리도 필요없게 된다. 
* JWT의 문제점은 ? 
    * JWT의 문제점이라고 한다면 인증과 관련된 정보를 브라우저에서 관리하기 때문에 해당 Token을 탈취를 해서 디코딩을 하게 된다면 악용될 우려가 있다. 
    * Json 형태의 데이터가 브라우저에 그대로 들어가지는 않고, 인코딩이 되긴 하지만 불안한 것은 사실이다. 