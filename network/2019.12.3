## 배포
    1. 먼저 프로젝트를 빌드해야 한다.
        * 빌드를 하기위한 환경도 필요하다.
        ex) 자바 프로젝트를 빌드하려면 open jdk가 필요함 

        * 자바 기준으로 빌드하는 명령은 다음과 같다. 
        ```
        gradlew clean build
        ```

        ```
        java -jar $JAR_FILE_NAME &  
        ```
        다음과 같은 명령어로 빌드된 jar파일을 실행해 볼 수 있다. 

        * 빌드를 하게되면 build 디렉터리가 생기고 그 안에 .jar 파일이 존재하게 된다. 

    2. 한 프로젝트의 코드가 여러개로 분산되어 있다면 도커로 각 각 다른 컨테이너로 띄워서 관리할 수 있다. 
        * 컨테이너에 필요한 이미지들의 관계를 설정해 주는 파일이 docker-compose.yml 파일이다. 
        * 그리고 포트 매핑을 해줘야 한다.
           * 포트 매핑이란 도커 컨테이너를 실행하는 운영체제에서의 포트와 컨테이너 안에 또 포트 번호가 있다 그 번호를 지정을 헤줘야 한다.
           ex) 80:80 -> 이렇게하면 앞의 80은 운영체제에서의 포트번호이고 뒤의 80은 도커 컨테이너 1개에서의 포트번호이다. 
        * docker-compose의 volumes 옵션은 앞서말한 운영체제에서의 자료들을 도커 컨테이너에 옮길 수 있는 명령이다. 
    

## 로드밸런서란? 

* 로드밸런서의 주요기능
    * NAT : 사설 IP주소를 공인 IP주소로 바꾸는 데 사용한 통신망의 주소 변조기이다. 
    * Tunneling : 인터넷 상에서 눈에 보이지 않는 통로를 만들어 통신할 수 있게 한 개념 
    * DSR : 로드밸런서 사용시 서버에서 클라이언트로 갈때 스위치를 거치지 않고 클라이언트의 IP로 바로 가게 만들 수 있는 기능
* 로드밸런서의 종류도 레벨별로 나뉜다. L2, L3, L4등등.. 

* 로드밸런서는 어떤 기준으로 로드밸런싱을 하나?
    1. 라운드로빈 
        * 1 2 3 서버가있다고하면 1 2 3, 2 3 1 ,3 1 2 이런식으로 진행하는 것을 말함. 
    2. Connection 
        * 연결이 적게 되어있는 서버를 순서대로 연결하는 방법
    3. Source
        * 사용자의 IP주소를 해싱하여 연결하는 방법
        * 사용자는 그래서 반드시 가는 서버가 정해져있다. 
        * 사용자의 요청이 동일한 서버로만 계속 가야되는 상황일때 (요청들이 이어지는 경우 ) 이 방법이 유용할 듯 싶다. 

