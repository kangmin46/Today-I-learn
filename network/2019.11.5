### 4.1 엔티티

- 기본 생성자는 필수다.(파라미터가 없는 Public 또는 Protected 생성자)
- final 클래스, enum, interface , inner 클래스 에서는 사용할 수 없다.
- 주의할점 : 파라미터가 있는 생성자를 만들게 되면, 기본 생성자가 없기 때문에 직접 만들어 줘야한다.
- 자바의 enum을 사용하면 @Enumerated 어노테이션으로 매핑해야 한다.
- @Lob : 을 사용하면 CLOB, BLOB 타입을 매핑할 수 있다.
- createDate, lastModifiedDate : 자바의 날짜 타입은 @Temporal을 사용해서 매핑한다.

### 4.4 데이터 베이스 스키마 자동 생성

    <property name="hibernate.hbm2ddl.auto" value="create /">
    // 이렇게 하면 애플리 케이션 실행 시점에 데이터베이스 테이블을 자동으로 생성한다.
    <property name="hibernate.show_sql" value="true /">
    // 이렇게 하면 테이블 쿼리를 볼 수 있다. 

### 4.6 기본 키 매핑

- DB별로 기본 키를 생성하는 방식이 서로 다르다.
- 직접 할당 : 애플리케이션에서 직접 할당한다.
- 자동생성
    1. IDENTITY : 기본 키 생성을 데이터베이스에 위임한다.
    2. SEQUENCE :  데이터베이스 시퀀스를 사용해서 기본 키를 할당한다.
    3. TABLE :   키 생성 테이블을 사용한다.

## 5장 연관관계 매핑 기초
- 연관관계 주인 : 객체를 양방향 연관관계로 만들면 연관관계의 주인을 정해야 한다.


### 5.1 단방향 연관관계

- 회원 객체와 팀 객체는 단방향이며 다대일 관계이다.
- 참조를 사용하는 객체의 연관관계는 단방향이다.
- 외래 키를 사용하는 테이블의 연관관계는 양방향이다.
- @JoinColumn
    - name : 매핑할 외래 키 이름
- @ManyToOne
    - 다대일 관계에서 사용

### 5.2 연관관계 사용

5.2.2 조회 

- 연관관계가 있는 엔티티를 조회하는 방법은 크게 2가지다.
1. 객체 그래프 탐색
2. 객체지향 쿼리 사용

    Member member = em.find(Member.class, "member1");
    Team team = member.getTeam();
    System.out.println("팀 이름 = " + team.getName());

- 이렇게 팀의 객체를 꺼내는데 em.find는 멤버를 찾아서 멤버에서 팀을 찾는 이러한 방식을 객체 그래프 탐색이라고 한다.

5.2.5 연관된 엔티티 삭제

- 예를들어 팀을 삭제하려고 한다면 팀에 소속되어있는 회원들이 팀과 연관관계를 끊어야 팀을 삭제할 수 있다. 그렇지 않으면 외래 키 제약조건으로, 데이터베이스에서 오류가 발생한다.
- @mappedBy속성은 양방향 매핑일 때 사용하는데 반대쪽 매핑의 필드 이름을 값으로 주면 된다.