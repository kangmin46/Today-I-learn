* MultiStatement :  하나의 Statement에서 여러번의 쿼리를 실행 할 수 있다는 의미

* Union SQL Injection : 

* Time Based SQL 인젝션
Time Based SQL 인젝션은 SLEEP 함수나 waitfor delay 등 시간 지연 함수를 이용하여 DBMS의 한 쓰레드를 잡고 대기함으로써 서비스 지연을 유발할 수 있다.
Time Based SQL 인젝션은 자동화 툴을 이용할 때 특히 조심해야 한다. 대량으로 주입된 SLEEP 함수로 인해 가용성에 문제를 줄 수 있기 때문이다.

' or sleep(5)--;

입력 값에 대한 검증

SQL Injection 에서 사용되는 기법과 키워드는 엄청나게 많습니다. 사용자의 입력 값에 대한 검증이 필요한데요. 서버 단에서 화이트리스트 기반으로 검증해야 합니다. 
블랙리스트 기반으로 검증하게 되면 수많은 차단리스트를 등록해야 하고, 하나라도 빠지면 공격에 성공하게 되기 때문입니다. 
공백으로 치환하는 방법도 많이 쓰이는데, 이 방법도 취약한 방법입니다. 
예를 들어 공격자가 SESELECTLECT 라고 입력 시 중간의 SELECT가 공백으로 치환이 되면 SELECT 라는 키워드가 완성되게 됩니다. 
공백 대신 공격 키워드와는 의미 없는 단어로 치환되어야 합니다. 

화이트 리스트 위주의 검증 : 블랙 리스트는 허용해야 되지 않는 것들을 나열하는 거라고 한다면, 화이트 리스트는 허용해야 하는 것들만 정해서 나머지는 통과시키지 않는 방식이다.
예를 들면, 문자열 “<scr<script>ipt>”에서 문제가 되는 부분(<script>태그)을 찾아서 제거했는데도 불구하고 문자열은 다시 문제가 되는 부분(<script>)을 포함하게 된다. 
블랙리스트를 이용해서 검증하는 경우에는 대부분 이런 교묘한 트릭이 가능하다.

Prepared Statement 구문사용
Prepared Statement 구문을 사용하게 되면, 사용자의 입력 값이 데이터베이스의 파라미터로 들어가기 전에DBMS가 미리 컴파일 하여 실행하지 않고 대기합니다. 
그 후 사용자의 입력 값을 문자열로 인식하게 하여 공격쿼리가 들어간다고 하더라도, 사용자의 입력은 이미 의미 없는 단순 문자열 이기 때문에 전체 쿼리문도 공격자의 의도대로 작동하지 않습니다.

Error Message 노출 금지

공격자가 SQL Injection을 수행하기 위해서는 데이터베이스의 정보(테이블명, 컬럼명 등)가 필요합니다. 데이터베이스 에러 발생 시 따로 처리를 해주지 않았다면, 에러가 발생한 쿼리문과 함께 에러에 관한 내용을 반환헤 줍니다. 여기서 테이블명 및 컬럼명 그리고 쿼리문이 노출이 될 수 있기 때문에, 데이터 베이스에 대한 오류발생 시 사용자에게 보여줄 수 있는 페이지를 제작 혹은 메시지박스를 띄우도록 하여야 합니다. 
