## DBMS 와 실행 계획

- 데이터에 접근하는 방법은 어떻게 결정할까?
    - RDB에서 데이터 접근 절차를 결정하는 모듈은 쿼리 평가 엔진이다.
- 데이터 접근 순서
    1. 파서 
        - 사용자로부터 입력받은 SQL 구문이 항상 구문적으로 올바르다는 보증이 없으므로 검사를 해준다.
        - SQL 구문을 정형적인 형식으로 변환해준다.
    2. 옵티마이저(최적화)
        - 최적화의 대상은 데이터 접근법(실행 계획) DBMS 두뇌의 핵심
        - 인덱스 유무, 데이터 분산 또는 편향 정도, DBMS 내부 매개변수 등의 조건을 고려해서,  가장 낮은 비용을 가진 실행 계획을 선택한다.
    3. 카탈로그 매니저
        - 옵티마이저에 중요한 정보를 제공하는 것이 카탈로그 매니저이다. 카탈로그란 DBMS의 내부 정보를 모아놓은 테이블들로, 테이블 또는 인덱스의 통계 정보가 저장되어 있다.
        - 간단하게 통계 정보 라고도 한다.
    4. 플랜 평가
        - 옵티마이저가 SQL구문에서 여러개의 실행 계획을 세운 뒤 그것을 받아 최적의 실행 결과를 선택하는 것이 플랜 평가이다.
        - 실행계획이라는 것은 곧바로 DBMS가 실행할 수 있는 형태의 코드가 아니다.
    - 옵티마이저는 다음과 같은 정보로 플랜 선택을 한다.
        1. 각 테이블의 레코드 수
        2. 각 테이블의 필드 수와 필드의 크기
        3. 필드의 카디널리티
        4. 필드값의 히스토그램
        5. 필드 내부에 있는 NULL 수
        6. 인덱스 정보
    - 하지만 옵티마이저는 시스템 카탈로그에서 정보를 받아와서 실행 계획을 세우기 때문에 그 정보가 갱신되지 않는다면 최적의 실행 계획을 내지 않을 수도 있다.
    - 그래서 시스템 카탈로그를 갱신을 자주해야 한다고 생각하지만, 이것은 실행 비용이 굉장히 높은 작업이기 때문에 갱신 시점을 확실하게 검토해야 한다.
    - 통계 정보가 최신이라도  SQL  구문이 너무 복잡하면 옵티마이저가 최적의 접근 경로를 선택하지 못할 수도 있다.
    - 대표적인 실행 계획 3가지
        1. 테이블 풀 스캔 실행 계획
        2. 인덱스 스캔의 실행 계획
        3. 간단한 테이블 결합의 실행 계획

    * reduce 연산은 어떤 스트림에 순차적으로 어떤 연산을 할 때에 사용한다. 
    ex) 1,2,3,4,5 가 있으면 1*2*3*4*5 등

    * iterate 연산은 새로운 값을 끊임없이 생산할 수 있다. 
    * 어떤 클래스에 여러가지 값이 들어가 있다면 그 중에 특중 값만 가져오기 위해서 스트림 Comparator를 구현할 수 있다. 
    ex) Comparator<Dish> dishComparator = Comparator.comparingInt(Dish::getCalories);
    * 그리고 그 Comparator를 활용해서 최대, 최소를 구할 수 있다. 
    ex) Optional<Dish> collect = menu.stream()
            .collect(maxBy(dishComparator));
    * 문자열 연결
    ex) String collect = menu.stream()
            .map(Dish::getName)
            .collect(joining(", "));

    * reducing은 세 개의 인수를 받는다. 
    