## 프로세스간 통신(IPC)

- Inter Process Communication(IPC)
- 프로세스들이 서로의 공간을 쉽게 접근할 수 있다면? — 프로세스 데이터/코드가 바뀔 수 있으니 위험하다.(해킹의 위험)
- 원래는 프로세스는 남의 프로세스 안에 있는 주소를 알 수가 없다.
- 그래서 프로세스간 통신 방법이 있다.
- 이것이 IPC이다.
- 프로세스간 통신이 왜 필요할까?
    - 성능을 높이기 위해 하나의 프로그램을 여러 프로세스를 만들어서 동시 실행
    - 이 때 프로세스간 상태 확인 및 데이터 송수신이 필요.
- fork() 시스템 콜
    - fork() 함수로 프로세스 자신을 복사해서 새로운 프로세스로 만들 수 있음
        - 부모 프로세스, 자식 프로세스
- 예를 들어서 1~1000까지 더하는 프로그램이 있다.
    - 그런데 이것은 한 프로세스에서 다 하는 게 아니라 10개의 프로세스로 나눈다면?
    - 1~100 , 101~200 까지 더하는 프로세스 등으로 나누어서 동시에 연산을 진행한다.
    - 그러면 10배 빠르게 더 동작할 수 있다. 이론상
    - 하지만 이 때 더한 값들을 취합을 해야하기 때문에,  프로세스 간 통신 필요
- 그런데 저장 매체 HDD, SDD 등은 모든 프로세스가 공유가 가능하다!
    - 그래서 IPC기법 중 하나로 file을 사용하는 방법이 있다.
    - 그런데 문제가 있다. 저장 매체에서의 값이 계속 바뀌게 되는데, 그것을 각 프로세스가 매번 접근해서 데이터를 확인하는 작업은 굉장히 비효율적이다.
    - 그리고 저장 매체를 사용하는 방법은 전에도 말했듯이 굉장히 오래걸린다.
- 커널 공간은 프로세스간 공유가 가능하다.
- 다양한 IPC 기법
    1. file 사용 → 느림.. 현실성이 없다. 
    2. Message Queue
    3. Shared Memory
    4. Pipe
    5. Signal
    6. Semaphore
    7. Socket
- 2~7번 까지 전부 커널 공간을 사용한다!! 이것이 핵심
- 정리
    - 프로세스 동시 실행을 통한 성능 개선, 복잡한 프로그램을 위해 프로세스간 통신 필요
    - 프로세스간 공간이 분리
    - 프로세스간 통신을 위한 특별한 기법이 필요
        - IPC
    - 대부분의 IPC기법은 결국 커널 공간을 활용하는 것이다.
        - 이유: 커널 공간은 공유하기 때문